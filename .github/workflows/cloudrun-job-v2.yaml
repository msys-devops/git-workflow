name: Reusable Cloud Run Job Workflow

on:
  workflow_call:
    inputs:
      job_name:
        description: 'The name of the Cloud Run job.'
        required: true
        type: string
      gcp_region:
        description: 'The GCP region for the job.'
        required: true
        type: string
      gcp_project_id:
        description: 'The GCP project ID.'
        required: true
        type: string
      image_repo:
        description: 'The Artifact Registry repository for the FPM image.'
        required: true
        type: string
      image_tag:
        description: 'The tag of the image to deploy.'
        required: true
        type: string
      cpu:
        description: 'CPU allocation for the FPM container.'
        required: false
        type: string
        default: '1'
      memory:
        description: 'Memory allocation for the FPM container.'
        required: false
        type: string
        default: '512Mi'
      command:
        description: 'The command to run in the container. If specified, the job is updated with this command.'
        required: true
        type: string
      args:
        description: 'Arguments for the command. Use a comma-separated string, e.g., "arg1,arg2,arg3".'
        required: true
        type: string
      project_name:
        required: false
        type: string
      env:
        required: false
        type: string            

    secrets:
      gcp_workload_identity_provider:
        required: true
      gcp_service_account:
        required: true

jobs:
  run-cloud-run-job:
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation
    runs-on: ubuntu-latest

    steps:
      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.gcp_workload_identity_provider }}
          service_account: ${{ secrets.gcp_service_account }}

      - name: 🛠️ Create or Update Job
        run: |
          # Construct the full image name with the hardcoded region for Artifact Registry
          IMAGE_NAME="asia-southeast1-docker.pkg.dev/${{ inputs.gcp_project_id }}/${{ inputs.image_repo }}:${{ inputs.image_tag }}"

          # Build a string of all flags that will be passed to the gcloud command
          FLAGS="--region ${{ inputs.gcp_region }} \
                 --project ${{ inputs.gcp_project_id }} \
                 --image $IMAGE_NAME"

          # Conditionally add flags ONLY if they have a non-empty value, matching original script logic.
          if [[ -n "${{ inputs.cpu }}" ]]; then
            FLAGS+=" --cpu ${{ inputs.cpu }}"
          fi

          if [[ -n "${{ inputs.memory }}" ]]; then
            FLAGS+=" --memory ${{ inputs.memory }}"
          fi
          
          if [[ -n "${{ inputs.command }}" ]]; then
            FLAGS+=" --command '${{ inputs.command }}' --args '${{ inputs.args }}'"
          fi

          # Check if the job already exists
          echo "Checking for existing job: ${{ inputs.job_name }}"
          if gcloud run jobs describe ${{ inputs.job_name }} --region ${{ inputs.gcp_region }} --project ${{ inputs.gcp_project_id }} &>/dev/null; then
            echo "Job found. Updating..."
            FINAL_CMD="gcloud run jobs update ${{ inputs.job_name }} $FLAGS"
          else
            echo "Job not found. Creating..."
            FINAL_CMD="gcloud run jobs create ${{ inputs.job_name }} $FLAGS"
          fi

          # Execute the final gcloud command (either create or update)
          echo "--- Running Command ---"
          echo "$FINAL_CMD"
          eval $FINAL_CMD
          echo "--- Create/Update Complete ---"

      - name: 🚀 Execute Job
        id: execute_job
        continue-on-error: true      
        run: |
          gcloud run jobs execute ${{ inputs.job_name }} \
            --region ${{ inputs.gcp_region }} \
            --project ${{ inputs.gcp_project_id }} \
            --wait # Waits for the job to complete and streams logs

      - name: 📋 Fetching Logs
        run: |
          echo "Fetching logs..."
          EXECUTION_NAME=$(gcloud run jobs executions list \
            --job=${{ inputs.job_name }} \
            --region=${{ inputs.gcp_region }} \
            --project=${{ inputs.gcp_project_id }} \
            --sort-by=~completionTime \
            --format='value(name)' \
            --limit=1)

          gcloud logging read "resource.type=\"cloud_run_job\" AND resource.labels.job_name=\"${{ inputs.job_name }}\" AND labels.\"run.googleapis.com/execution_name\"=\"$EXECUTION_NAME\"" \
            --project=${{ inputs.gcp_project_id }} \
            --format='value(textPayload)'