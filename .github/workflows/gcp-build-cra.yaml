name: Build Web Service

on:
  workflow_call:
    inputs:
      gcp_region:
        required: true
        type: string
      gcp_project_id:
        required: true
        type: string
      environment:
        required: true
        type: string
      target:
        required: true
        type: string
      repository:
        required: true
        type: string
      branch:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      project_dir:
        required: true
        type: string 
      tag_env:
        required: true
        type: string 

    secrets:
      submodule_ssh_key:
        required: true
      ar_repository:
        required: true
      envs:
        required: true


jobs:
  build:
    name: Pull Repository & Build
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment }}
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - uses: actions/checkout@v3

    - name: Set tag
      id: vars
      run: echo "::set-output name=tag::${GITHUB_REF#refs/*/}"
    
    - name: Checkout submodules
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.branch }}
        path: ${{ inputs.project_dir }}
        ssh-key: ${{ secrets.submodule_ssh_key }}
        submodules: recursive

    # - run: git describe --tags > ${{ inputs.project_dir }}/project/version
    
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.gcp_workload_identity_provider }}
        service_account: ${{ secrets.gcp_service_account }}

    - name: Build, tag, and push image to Artifacts Registry
      id: build-image
      env:
        TAG_LATEST: ${{ inputs.gcp_region }}-docker.pkg.dev/${{ inputs.gcp_project_id }}/${{ secrets.ar_repository }}:${{ inputs.tag_env }}
        TAG_VERSION: ${{ inputs.gcp_region }}-docker.pkg.dev/${{ inputs.gcp_project_id }}/${{ secrets.ar_repository }}:${{ steps.vars.outputs.tag}}

      run: |
        docker build -f ${{ inputs.dockerfile }} -t $TAG_LATEST -t $TAG_VERSION --target ${{ inputs.target }} . \
        --build-arg ENVS=${{ secrets.envs }}
        
        docker push $TAG_LATEST
        docker push $TAG_VERSION
        echo "::set-output name=image::$TAG_VERSION"